{"ast":null,"code":"const axios = require('axios');\nconst WeatherStackApiKey = '695b40b10919df8b82d0c08307495137';\nconst WeatherStackApiUrl = 'http://api.weatherstack.com';\nasync function fetchCurrentWeatherData(location) {\n  try {\n    const response = await axios.get(`${WeatherStackApiUrl}/current`, {\n      params: {\n        access_key: WeatherStackApiKey,\n        query: location\n      }\n    });\n    const data = response.data;\n    return {\n      temperature: data.current.temperature,\n      description: data.current.weather_descriptions[0]\n    };\n  } catch (error) {\n    console.log(error);\n  }\n}\nasync function fetchHistoricalWeatherData(location, date) {\n  try {\n    const response = await axios.get(`${WeatherStackApiUrl}/historical/${date}`, {\n      params: {\n        access_key: WeatherStackApiKey,\n        query: location\n      }\n    });\n    const data = response.data;\n    return {\n      temperature: data.current.temperature,\n      description: data.current.weather_descriptions[0]\n    };\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// Example usage\nconst location = 'New York';\nconst currentDate = new Date().toISOString().slice(0, 10);\nconst pastDate = '2022-01-01';\nasync function main() {\n  const currentWeatherData = await fetchCurrentWeatherData(location);\n  console.log('Current Weather Data:', currentWeatherData);\n  const historicalWeatherData = await fetchHistoricalWeatherData(location, pastDate);\n  console.log('Historical Weather Data:', historicalWeatherData);\n}\nmain();","map":{"version":3,"names":["axios","require","WeatherStackApiKey","WeatherStackApiUrl","fetchCurrentWeatherData","location","response","get","params","access_key","query","data","temperature","current","description","weather_descriptions","error","console","log","fetchHistoricalWeatherData","date","currentDate","Date","toISOString","slice","pastDate","main","currentWeatherData","historicalWeatherData"],"sources":["D:/D DATA/sdp/card/frontend/src/components/Weather.js"],"sourcesContent":["const axios = require('axios');\r\n\r\n\r\nconst WeatherStackApiKey = '695b40b10919df8b82d0c08307495137';\r\nconst WeatherStackApiUrl = 'http://api.weatherstack.com';\r\n\r\nasync function fetchCurrentWeatherData(location) {\r\n    try {\r\n        const response = await axios.get(`${WeatherStackApiUrl}/current`, {\r\n            params: {\r\n                access_key: WeatherStackApiKey,\r\n                query: location,\r\n            },\r\n        });\r\n        const data = response.data;\r\n        return {\r\n            temperature: data.current.temperature,\r\n            description: data.current.weather_descriptions[0],\r\n        };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nasync function fetchHistoricalWeatherData(location, date) {\r\n    try {\r\n        const response = await axios.get(`${WeatherStackApiUrl}/historical/${date}`, {\r\n            params: {\r\n                access_key: WeatherStackApiKey,\r\n                query: location,\r\n            },\r\n        });\r\n        const data = response.data;\r\n        return {\r\n            temperature: data.current.temperature,\r\n            description: data.current.weather_descriptions[0],\r\n        };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n// Example usage\r\nconst location = 'New York';\r\nconst currentDate = new Date().toISOString().slice(0, 10);\r\nconst pastDate = '2022-01-01';\r\n\r\nasync function main() {\r\n    const currentWeatherData = await fetchCurrentWeatherData(location);\r\n    console.log('Current Weather Data:', currentWeatherData);\r\n\r\n    const historicalWeatherData = await fetchHistoricalWeatherData(location, pastDate);\r\n    console.log('Historical Weather Data:', historicalWeatherData);\r\n}\r\n\r\nmain();\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAG9B,MAAMC,kBAAkB,GAAG,kCAAkC;AAC7D,MAAMC,kBAAkB,GAAG,6BAA6B;AAExD,eAAeC,uBAAuB,CAACC,QAAQ,EAAE;EAC7C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEJ,kBAAmB,UAAS,EAAE;MAC9DK,MAAM,EAAE;QACJC,UAAU,EAAEP,kBAAkB;QAC9BQ,KAAK,EAAEL;MACX;IACJ,CAAC,CAAC;IACF,MAAMM,IAAI,GAAGL,QAAQ,CAACK,IAAI;IAC1B,OAAO;MACHC,WAAW,EAAED,IAAI,CAACE,OAAO,CAACD,WAAW;MACrCE,WAAW,EAAEH,IAAI,CAACE,OAAO,CAACE,oBAAoB,CAAC,CAAC;IACpD,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ;AAEA,eAAeG,0BAA0B,CAACd,QAAQ,EAAEe,IAAI,EAAE;EACtD,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEJ,kBAAmB,eAAciB,IAAK,EAAC,EAAE;MACzEZ,MAAM,EAAE;QACJC,UAAU,EAAEP,kBAAkB;QAC9BQ,KAAK,EAAEL;MACX;IACJ,CAAC,CAAC;IACF,MAAMM,IAAI,GAAGL,QAAQ,CAACK,IAAI;IAC1B,OAAO;MACHC,WAAW,EAAED,IAAI,CAACE,OAAO,CAACD,WAAW;MACrCE,WAAW,EAAEH,IAAI,CAACE,OAAO,CAACE,oBAAoB,CAAC,CAAC;IACpD,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ;;AAEA;AACA,MAAMX,QAAQ,GAAG,UAAU;AAC3B,MAAMgB,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AACzD,MAAMC,QAAQ,GAAG,YAAY;AAE7B,eAAeC,IAAI,GAAG;EAClB,MAAMC,kBAAkB,GAAG,MAAMvB,uBAAuB,CAACC,QAAQ,CAAC;EAClEY,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAES,kBAAkB,CAAC;EAExD,MAAMC,qBAAqB,GAAG,MAAMT,0BAA0B,CAACd,QAAQ,EAAEoB,QAAQ,CAAC;EAClFR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,qBAAqB,CAAC;AAClE;AAEAF,IAAI,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}